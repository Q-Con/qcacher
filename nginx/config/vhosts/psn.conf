# PSN Node

server {
    listen 80;
    server_name .ps4.update.playstation.net;

    # PS4 update files
    # * Server doesn't provide any caching information, so we have to be very
    #   explicit with what we're caching
    # * Firmware files are identical across regions (despite differing
    #   servers and query parameters) so we will cache based on URI alone


    location /update/ps4/list/ {
        # Update lists
        # * Unique per region - XML is region tagged
        # * Can change at any point, so revalidate
        proxy_cache_key "qcacher-psn$request_uri";
        proxy_cache_valid 200 1m;
        proxy_cache other;
        include includes/proxy-base;
        proxy_pass http://$host$request_uri;
    }

    location /update/ps4/image/ {
        # Update images
        # * Identical across regions
        # * Won't change, so cache
        # * Large, so slice
        slice 16m;
        proxy_set_header Range $slice_range;
        proxy_hide_header Etag;
        proxy_cache_key "qcacher-psn$uri$slice_range";
        proxy_cache_valid 200 206 14d;
        proxy_cache installs;
        include includes/proxy-base;
        proxy_pass http://$host$request_uri;
    }
}

server {
    listen 80;
    server_name .dl.playstation.net;

    # PSN downloads

    location /gs2/ {
        # PSN application content

        # Handle redirects to 3rd party CDNs
        error_page 301 302 307 = @gs2_redirect;
        recursive_error_pages on;
        proxy_intercept_errors on;

        # Range requests are guaranteed and we have large assets so we'll
        # slice in 16MB chunks and cache
        slice 16m;
        proxy_cache_valid 200 206 14d;
        proxy_set_header Range $slice_range;

        # Looks like PS passes security parameters on the URI so we
        # cache based on just the URI excluding the query string
        proxy_cache_key "qcacher-psn$uri$slice_range";

        # PSN's Cache-Control and Expires are restrictive
        proxy_ignore_headers Expires Cache-Control;
        proxy_hide_header Etag;

        proxy_cache installs;
        include includes/proxy-base;
        proxy_pass http://$host$request_uri;
    }

    location /tmdb2/ {
        # PSN application info tickets

        proxy_cache_key "qcacher-psn$request_uri";
        proxy_cache_valid 200 1m;
        proxy_cache other;
        include includes/proxy-base;
        proxy_pass http://$host$request_uri;
    }

    location ~ ^/(nsx|psn-rsc)/ {
        # thumbnails, etc
        proxy_cache_key "qcacher-psn$request_uri";
        proxy_cache_valid 200 14d;
        proxy_cache other;
        include includes/proxy-base;
        proxy_pass http://$host$request_uri;
    }

    location /networktest/ {
        # Showing off the cache speed
        proxy_cache_key "qcacher-psn$uri";
        proxy_cache_valid 200 90d;
        proxy_cache other;
        include includes/proxy-base;
        proxy_pass http://$host$request_uri;
    }

    location / {
        # Just pass through everything else
        include includes/proxy-base;
        proxy_pass http://$host$request_uri;
    }

    # Process a redirect and cache the response
    location @gs2_redirect {

        # Range requests are guaranteed and we have large assets so we'll
        # slice in 16MB chunks and cache
        slice 16m;
        proxy_cache_valid 200 206 14d;
        proxy_set_header Range $slice_range;

        # Looks like PS passes security parameters on the URI so we
        # cache based on just the URI excluding the query string
        proxy_cache_key "qcacher-psn$uri$slice_range";

        # PSN's Cache-Control and Expires are restrictive
        proxy_ignore_headers Expires Cache-Control;
        proxy_hide_header Etag;

        proxy_cache installs;
        include includes/proxy-base;
        # We need to copy the variable as it's not available after the pass starts
        set $location $upstream_http_location;
        proxy_pass $location;
    }
}
